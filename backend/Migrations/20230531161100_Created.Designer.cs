// <auto-generated />
using System;
using System.Collections.Generic;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(CarServiceContext))]
    [Migration("20230531161100_Created")]
    partial class Created
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Assistance", b =>
                {
                    b.Property<int>("IdAssistance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdAssistance"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdCar")
                        .HasColumnType("integer");

                    b.Property<int>("IdOrder")
                        .HasColumnType("integer");

                    b.HasKey("IdAssistance");

                    b.HasIndex("IdCar");

                    b.ToTable("Assistances");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Assistance");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Call", b =>
                {
                    b.Property<int>("IdCall")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCall"));

                    b.Property<int?>("CustomerIdPerson")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("integer");

                    b.Property<int>("IdCustomerServiceRepresentative")
                        .HasColumnType("integer");

                    b.HasKey("IdCall");

                    b.HasIndex("CustomerIdPerson");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdCustomerServiceRepresentative");

                    b.ToTable("Calls");
                });

            modelBuilder.Entity("Entities.Models.Car", b =>
                {
                    b.Property<int>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdCar"));

                    b.Property<int?>("CustomerIdPerson")
                        .HasColumnType("integer");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdService")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("IdCar");

                    b.HasIndex("CustomerIdPerson");

                    b.HasIndex("IdService");

                    b.ToTable("Cars");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Car");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.MechanicAssistance", b =>
                {
                    b.Property<int>("IdMechanicSTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdMechanicSTask"));

                    b.Property<int>("IdAssistance")
                        .HasColumnType("integer");

                    b.Property<int>("IdMechanic")
                        .HasColumnType("integer");

                    b.HasKey("IdMechanicSTask");

                    b.HasIndex("IdAssistance");

                    b.HasIndex("IdMechanic");

                    b.ToTable("MechanicAssistance");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdOrder"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<int?>("CustomerIdPerson")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DateCompleted")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdAssistance")
                        .HasColumnType("integer");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("integer");

                    b.Property<int>("IdMechanic")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("IdOrder");

                    b.HasIndex("CustomerIdPerson");

                    b.HasIndex("IdAssistance");

                    b.HasIndex("IdCustomer");

                    b.HasIndex("IdMechanic");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.Models.Part", b =>
                {
                    b.Property<int>("IdPart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPart"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPart");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            IdPart = 1,
                            Cost = 50m,
                            Name = "Brake pads"
                        },
                        new
                        {
                            IdPart = 2,
                            Cost = 10m,
                            Name = "Oil filter"
                        },
                        new
                        {
                            IdPart = 3,
                            Cost = 20m,
                            Name = "Spark plugs"
                        },
                        new
                        {
                            IdPart = 4,
                            Cost = 15m,
                            Name = "Air filter"
                        },
                        new
                        {
                            IdPart = 5,
                            Cost = 150m,
                            Name = "Alternator"
                        },
                        new
                        {
                            IdPart = 6,
                            Cost = 80m,
                            Name = "Battery"
                        },
                        new
                        {
                            IdPart = 7,
                            Cost = 100m,
                            Name = "Radiator"
                        },
                        new
                        {
                            IdPart = 8,
                            Cost = 70m,
                            Name = "Water pump"
                        },
                        new
                        {
                            IdPart = 9,
                            Cost = 120m,
                            Name = "Starter motor"
                        },
                        new
                        {
                            IdPart = 10,
                            Cost = 90m,
                            Name = "Fuel pump"
                        });
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.Property<int>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPerson"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPerson");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.RepairPart", b =>
                {
                    b.Property<int>("IdRepairPart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRepairPart"));

                    b.Property<int>("IdPart")
                        .HasColumnType("integer");

                    b.Property<int>("IdRepair")
                        .HasColumnType("integer");

                    b.HasKey("IdRepairPart");

                    b.HasIndex("IdPart");

                    b.HasIndex("IdRepair");

                    b.ToTable("RepairParts");
                });

            modelBuilder.Entity("Entities.Models.Workshop", b =>
                {
                    b.Property<int>("IdWorkshop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdWorkshop"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdWorkshop");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            IdWorkshop = 1,
                            Address = "123 Main Street, Anytown USA",
                            Name = "Car Service Center",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            IdWorkshop = 2,
                            Address = "456 Park Avenue, Anytown USA",
                            Name = "Auto Repair Shop",
                            PhoneNumber = "555-123-4567"
                        },
                        new
                        {
                            IdWorkshop = 3,
                            Address = "789 Elm Street, Anytown USA",
                            Name = "Mechanic Shop",
                            PhoneNumber = "999-888-7777"
                        });
                });

            modelBuilder.Entity("Entities.Models.Repair", b =>
                {
                    b.HasBaseType("Entities.Models.Assistance");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("Entities.Models.Sale", b =>
                {
                    b.HasBaseType("Entities.Models.Assistance");

                    b.Property<int>("ManufacturerWarranty")
                        .HasColumnType("integer");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("Sale");
                });

            modelBuilder.Entity("Entities.Models.CarForSale", b =>
                {
                    b.HasBaseType("Entities.Models.Car");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<int>("Warranty")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CarForSale");

                    b.HasData(
                        new
                        {
                            IdCar = 1,
                            IdService = 1,
                            Model = "Astra",
                            Type = 0,
                            Cost = 50000,
                            Warranty = 3
                        },
                        new
                        {
                            IdCar = 2,
                            IdService = 2,
                            Model = "Golf",
                            Type = 1,
                            Cost = 40000,
                            Warranty = 4
                        },
                        new
                        {
                            IdCar = 3,
                            IdService = 3,
                            Model = "Civic",
                            Type = 0,
                            Cost = 20000,
                            Warranty = 2
                        },
                        new
                        {
                            IdCar = 4,
                            IdService = 3,
                            Model = "Fiesta",
                            Type = 1,
                            Cost = 30000,
                            Warranty = 5
                        });
                });

            modelBuilder.Entity("Entities.Models.CarToRepair", b =>
                {
                    b.HasBaseType("Entities.Models.Car");

                    b.Property<int>("IdCustomer")
                        .HasColumnType("integer");

                    b.HasIndex("IdCustomer");

                    b.HasDiscriminator().HasValue("CarToRepair");
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.HasBaseType("Entities.Models.Person");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasBaseType("Entities.Models.Person");

                    b.Property<DateTime>("EmploymentDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("IdWorkshop")
                        .HasColumnType("integer");

                    b.Property<decimal>("MonthlySalary")
                        .HasColumnType("numeric");

                    b.HasIndex("IdWorkshop");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("Entities.Models.CustomerServiceRepresentative", b =>
                {
                    b.HasBaseType("Entities.Models.Employee");

                    b.Property<int>("ProcessedCallsCount")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CustomerServiceRepresentative");
                });

            modelBuilder.Entity("Entities.Models.Mechanic", b =>
                {
                    b.HasBaseType("Entities.Models.Employee");

                    b.Property<List<DateTime>>("BookedDates")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone[]");

                    b.HasDiscriminator().HasValue("Mechanic");

                    b.HasData(
                        new
                        {
                            IdPerson = 1,
                            BirthDate = new DateTime(1990, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Adam",
                            Surname = "Nowak",
                            EmploymentDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdWorkshop = 1,
                            MonthlySalary = 3000m,
                            BookedDates = new List<DateTime>()
                        },
                        new
                        {
                            IdPerson = 2,
                            BirthDate = new DateTime(1992, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Ewa",
                            Surname = "Kowalska",
                            EmploymentDate = new DateTime(2021, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdWorkshop = 1,
                            MonthlySalary = 3200m,
                            BookedDates = new List<DateTime>()
                        },
                        new
                        {
                            IdPerson = 3,
                            BirthDate = new DateTime(1988, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Name = "Tomasz",
                            Surname = "Lis",
                            EmploymentDate = new DateTime(2022, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IdWorkshop = 2,
                            MonthlySalary = 3500m,
                            BookedDates = new List<DateTime>()
                        });
                });

            modelBuilder.Entity("Entities.Models.Assistance", b =>
                {
                    b.HasOne("Entities.Models.Car", "Car")
                        .WithMany("Assistances")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");
                });

            modelBuilder.Entity("Entities.Models.Call", b =>
                {
                    b.HasOne("Entities.Models.Customer", null)
                        .WithMany("Calls")
                        .HasForeignKey("CustomerIdPerson");

                    b.HasOne("Entities.Models.Person", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.CustomerServiceRepresentative", "CustomerServiceRepresentative")
                        .WithMany("Calls")
                        .HasForeignKey("IdCustomerServiceRepresentative")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerServiceRepresentative");
                });

            modelBuilder.Entity("Entities.Models.Car", b =>
                {
                    b.HasOne("Entities.Models.Customer", null)
                        .WithMany("Cars")
                        .HasForeignKey("CustomerIdPerson");

                    b.HasOne("Entities.Models.Workshop", "Service")
                        .WithMany("Cars")
                        .HasForeignKey("IdService")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Entities.Models.MechanicAssistance", b =>
                {
                    b.HasOne("Entities.Models.Assistance", "Assistance")
                        .WithMany("MechanicAssistance")
                        .HasForeignKey("IdAssistance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Mechanic", "Mechanic")
                        .WithMany("MechanicAssistance")
                        .HasForeignKey("IdMechanic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistance");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.HasOne("Entities.Models.Customer", null)
                        .WithMany("Orders")
                        .HasForeignKey("CustomerIdPerson");

                    b.HasOne("Entities.Models.Assistance", "Assistance")
                        .WithMany()
                        .HasForeignKey("IdAssistance")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Person", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Mechanic", "Mechanic")
                        .WithMany("Orders")
                        .HasForeignKey("IdMechanic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assistance");

                    b.Navigation("Customer");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("Entities.Models.RepairPart", b =>
                {
                    b.HasOne("Entities.Models.Part", "Part")
                        .WithMany("RepairParts")
                        .HasForeignKey("IdPart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Repair", "Repair")
                        .WithMany("RepairParts")
                        .HasForeignKey("IdRepair")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("Entities.Models.CarToRepair", b =>
                {
                    b.HasOne("Entities.Models.Person", "Customer")
                        .WithMany()
                        .HasForeignKey("IdCustomer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Models.Employee", b =>
                {
                    b.HasOne("Entities.Models.Workshop", "Workshop")
                        .WithMany("Employees")
                        .HasForeignKey("IdWorkshop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Entities.Models.Assistance", b =>
                {
                    b.Navigation("MechanicAssistance");
                });

            modelBuilder.Entity("Entities.Models.Car", b =>
                {
                    b.Navigation("Assistances");
                });

            modelBuilder.Entity("Entities.Models.Part", b =>
                {
                    b.Navigation("RepairParts");
                });

            modelBuilder.Entity("Entities.Models.Workshop", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("Entities.Models.Repair", b =>
                {
                    b.Navigation("RepairParts");
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Navigation("Calls");

                    b.Navigation("Cars");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.CustomerServiceRepresentative", b =>
                {
                    b.Navigation("Calls");
                });

            modelBuilder.Entity("Entities.Models.Mechanic", b =>
                {
                    b.Navigation("MechanicAssistance");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
