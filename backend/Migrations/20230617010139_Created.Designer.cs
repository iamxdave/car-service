// <auto-generated />
using System;
using System.Collections.Generic;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace backend.Migrations
{
    [DbContext(typeof(CarServiceContext))]
    [Migration("20230617010139_Created")]
    partial class Created
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Car", b =>
                {
                    b.Property<Guid>("IdCar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("IdWorkshop")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("UserIdPerson")
                        .HasColumnType("uuid");

                    b.HasKey("IdCar");

                    b.HasIndex("IdWorkshop");

                    b.HasIndex("UserIdPerson");

                    b.ToTable("Cars");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Car");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.Property<Guid>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("DateCompleted")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("IdCar")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdMechanic")
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<Guid?>("UserIdPerson")
                        .HasColumnType("uuid");

                    b.HasKey("IdOrder");

                    b.HasIndex("IdCar");

                    b.HasIndex("IdMechanic");

                    b.HasIndex("IdUser");

                    b.HasIndex("UserIdPerson");

                    b.ToTable("Orders");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Order");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.Part", b =>
                {
                    b.Property<int>("IdPart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdPart"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPart");

                    b.ToTable("Parts");

                    b.HasData(
                        new
                        {
                            IdPart = 1,
                            Name = "Brake pads"
                        },
                        new
                        {
                            IdPart = 2,
                            Name = "Oil filter"
                        },
                        new
                        {
                            IdPart = 3,
                            Name = "Spark plugs"
                        },
                        new
                        {
                            IdPart = 4,
                            Name = "Air filter"
                        },
                        new
                        {
                            IdPart = 5,
                            Name = "Alternator"
                        },
                        new
                        {
                            IdPart = 6,
                            Name = "Battery"
                        },
                        new
                        {
                            IdPart = 7,
                            Name = "Radiator"
                        },
                        new
                        {
                            IdPart = 8,
                            Name = "Water pump"
                        },
                        new
                        {
                            IdPart = 9,
                            Name = "Starter motor"
                        },
                        new
                        {
                            IdPart = 10,
                            Name = "Fuel pump"
                        });
                });

            modelBuilder.Entity("Entities.Models.Person", b =>
                {
                    b.Property<Guid>("IdPerson")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdPerson");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Entities.Models.RepairPart", b =>
                {
                    b.Property<int>("IdRepairPart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdRepairPart"));

                    b.Property<decimal>("Cost")
                        .HasColumnType("numeric");

                    b.Property<int>("IdPart")
                        .HasColumnType("integer");

                    b.Property<Guid>("IdRepair")
                        .HasColumnType("uuid");

                    b.HasKey("IdRepairPart");

                    b.HasIndex("IdPart");

                    b.HasIndex("IdRepair");

                    b.ToTable("RepairParts");
                });

            modelBuilder.Entity("Entities.Models.Workshop", b =>
                {
                    b.Property<int>("IdWorkshop")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("IdWorkshop"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdWorkshop");

                    b.ToTable("Workshops");

                    b.HasData(
                        new
                        {
                            IdWorkshop = 1,
                            Address = "123 Main Street, Anytown USA",
                            Name = "Car Service Center",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            IdWorkshop = 2,
                            Address = "456 Park Avenue, Anytown USA",
                            Name = "Auto Repair Shop",
                            PhoneNumber = "555-123-4567"
                        },
                        new
                        {
                            IdWorkshop = 3,
                            Address = "789 Elm Street, Anytown USA",
                            Name = "Mechanic Shop",
                            PhoneNumber = "999-888-7777"
                        });
                });

            modelBuilder.Entity("Entities.Models.CarToBuy", b =>
                {
                    b.HasBaseType("Entities.Models.Car");

                    b.Property<int>("Cost")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Warranty")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("CarToBuy");

                    b.HasData(
                        new
                        {
                            IdCar = new Guid("4b94905e-0181-401c-8e14-c1ce19c34247"),
                            Brand = "Ford",
                            IdWorkshop = 1,
                            Model = "Fiesta",
                            Cost = 30000,
                            Description = "The Ford Fiesta is a popular compact car known for its affordability and energetic performance. It offers a comfortable ride and is an excellent choice for city driving.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("c76c8fbb-c1d3-4af4-a609-4b1f2302ef42"),
                            Brand = "Honda",
                            IdWorkshop = 1,
                            Model = "Civic",
                            Cost = 20000,
                            Description = "The Honda Civic is a reliable and fuel-efficient compact car. It combines a stylish design, spacious interior, and advanced features, making it a versatile option for various needs.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("35e50fdf-5695-429b-b772-f28ea6265f3d"),
                            Brand = "Opel",
                            IdWorkshop = 1,
                            Model = "Astra",
                            Cost = 50000,
                            Description = "The Opel Astra is a compact car known for its elegant style and high-quality craftsmanship. It offers advanced technologies, a comfortable interior, and a great driving experience on longer journeys.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("39f1a638-e31e-4aee-b16c-099d7afd79a6"),
                            Brand = "Volkswagen",
                            IdWorkshop = 2,
                            Model = "Golf",
                            Cost = 40000,
                            Description = "The Volkswagen Golf is an iconic compact car known for its solid construction, precise handling, and high-quality materials. It offers a versatile package and a wide range of features.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("fa756a6f-7547-4050-bc0d-61b1606c1889"),
                            Brand = "Tesla",
                            IdWorkshop = 2,
                            Model = "Elektra",
                            Cost = 70000,
                            Description = "The Tesla Elektra is a luxury electric car with a futuristic design. It boasts an impressive range and advanced autonomous features, making it a perfect choice for tech enthusiasts.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("e7f2bea5-a943-4234-aa6d-06cf7fa48f40"),
                            Brand = "BMW",
                            IdWorkshop = 2,
                            Model = "Swiftsport",
                            Cost = 55000,
                            Description = "The BMW Swiftsport is a sporty car with refined style and a powerful engine. It offers dynamic driving and unmatched excitement behind the wheel, satisfying the needs of sports car enthusiasts.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("e4df4b32-31bc-42cb-8cb5-d5bd8e261ca8"),
                            Brand = "Mercedes",
                            IdWorkshop = 2,
                            Model = "Aventura",
                            Cost = 90000,
                            Description = "The Mercedes Aventura is a luxurious SUV that combines elegance and comfort with impressive all-wheel drive capabilities. Its spacious interior and advanced safety systems make every journey a true pleasure.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("0a93fc24-22d7-409c-828c-313ee036f58d"),
                            Brand = "Audi",
                            IdWorkshop = 2,
                            Model = "Horizon",
                            Cost = 75000,
                            Description = "The Audi Horizon is an elegant sedan with modern technological solutions. Its refined interior and exceptional acoustics ensure a comfortable journey on any route.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("341adbcc-f730-44c3-bfa8-db4ef79c7b88"),
                            Brand = "Toyota",
                            IdWorkshop = 3,
                            Model = "Venture",
                            Cost = 25000,
                            Description = "The Toyota Venture is a compact crossover that excels in urban conditions. Equipped with advanced safety systems and an economical engine, it is an ideal companion for daily commuting.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("dca0b583-8a40-4693-a3df-cb7da2c1ff50"),
                            Brand = "Lamborghini",
                            IdWorkshop = 3,
                            Model = "Huracan",
                            Cost = 300000,
                            Description = "The Lamborghini Huracan is a high-performance supercar that embodies speed, luxury, and style. With its powerful engine and eye-catching design, it delivers an exhilarating driving experience.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("3234ec57-a066-4eaa-a855-68367d770107"),
                            Brand = "Porsche",
                            IdWorkshop = 3,
                            Model = "911",
                            Cost = 250000,
                            Description = "The Porsche 911 is an iconic sports car that combines timeless design with exceptional performance. Its precise handling, powerful engine, and luxurious interior make it a dream car for enthusiasts.",
                            Warranty = 5
                        },
                        new
                        {
                            IdCar = new Guid("9ede1d1e-7d83-4eef-89bf-9a8995609a26"),
                            Brand = "Ferrari",
                            IdWorkshop = 3,
                            Model = "488 GTB",
                            Cost = 350000,
                            Description = "The Ferrari 488 GTB is a legendary Italian supercar that represents the pinnacle of automotive engineering. With its breathtaking speed, aerodynamic design, and luxurious features, it is a symbol of automotive excellence.",
                            Warranty = 5
                        });
                });

            modelBuilder.Entity("Entities.Models.CarToRepair", b =>
                {
                    b.HasBaseType("Entities.Models.Car");

                    b.Property<Guid>("IdUser")
                        .HasColumnType("uuid");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("IdUser");

                    b.HasDiscriminator().HasValue("CarToRepair");
                });

            modelBuilder.Entity("Entities.Models.Repair", b =>
                {
                    b.HasBaseType("Entities.Models.Order");

                    b.Property<decimal>("TotalPartCost")
                        .HasColumnType("numeric");

                    b.HasDiscriminator().HasValue("Repair");
                });

            modelBuilder.Entity("Entities.Models.Sale", b =>
                {
                    b.HasBaseType("Entities.Models.Order");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("SaleCost")
                        .HasColumnType("integer");

                    b.Property<int>("Warranty")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Sale");
                });

            modelBuilder.Entity("Entities.Models.Mechanic", b =>
                {
                    b.HasBaseType("Entities.Models.Person");

                    b.Property<List<DateTime>>("BookedDates")
                        .IsRequired()
                        .HasColumnType("timestamp without time zone[]");

                    b.Property<int>("IdWorkshop")
                        .HasColumnType("integer");

                    b.HasIndex("IdWorkshop");

                    b.HasDiscriminator().HasValue("Mechanic");

                    b.HasData(
                        new
                        {
                            IdPerson = new Guid("bd8553c1-81b9-4a6e-9302-97fd11b8d6c6"),
                            Name = "Adam",
                            Surname = "Nowak",
                            BookedDates = new List<DateTime> { new DateTime(2023, 6, 18, 0, 0, 0, 0, DateTimeKind.Local) },
                            IdWorkshop = 1
                        },
                        new
                        {
                            IdPerson = new Guid("1c8dbd81-0b99-4cca-8430-3cb65d6560b0"),
                            Name = "Ewa",
                            Surname = "Kowalska",
                            BookedDates = new List<DateTime> { new DateTime(2023, 6, 25, 0, 0, 0, 0, DateTimeKind.Local) },
                            IdWorkshop = 1
                        },
                        new
                        {
                            IdPerson = new Guid("d7a8be52-893b-42e0-aefb-0e8d251ee7de"),
                            Name = "Tomasz",
                            Surname = "Lis",
                            BookedDates = new List<DateTime>(),
                            IdWorkshop = 2
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.HasBaseType("Entities.Models.Person");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Entities.Models.Car", b =>
                {
                    b.HasOne("Entities.Models.Workshop", "Workshop")
                        .WithMany("Cars")
                        .HasForeignKey("IdWorkshop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany("Cars")
                        .HasForeignKey("UserIdPerson");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Entities.Models.Order", b =>
                {
                    b.HasOne("Entities.Models.Car", "Car")
                        .WithMany("Orders")
                        .HasForeignKey("IdCar")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Mechanic", "Mechanic")
                        .WithMany("Orders")
                        .HasForeignKey("IdMechanic")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Person", "Customer")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany("Orders")
                        .HasForeignKey("UserIdPerson");

                    b.Navigation("Car");

                    b.Navigation("Customer");

                    b.Navigation("Mechanic");
                });

            modelBuilder.Entity("Entities.Models.RepairPart", b =>
                {
                    b.HasOne("Entities.Models.Part", "Part")
                        .WithMany("RepairParts")
                        .HasForeignKey("IdPart")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Repair", "Repair")
                        .WithMany("RepairParts")
                        .HasForeignKey("IdRepair")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Part");

                    b.Navigation("Repair");
                });

            modelBuilder.Entity("Entities.Models.CarToRepair", b =>
                {
                    b.HasOne("Entities.Models.Person", "User")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Mechanic", b =>
                {
                    b.HasOne("Entities.Models.Workshop", "Workshop")
                        .WithMany("Mechanics")
                        .HasForeignKey("IdWorkshop")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Entities.Models.Car", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.Part", b =>
                {
                    b.Navigation("RepairParts");
                });

            modelBuilder.Entity("Entities.Models.Workshop", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Mechanics");
                });

            modelBuilder.Entity("Entities.Models.Repair", b =>
                {
                    b.Navigation("RepairParts");
                });

            modelBuilder.Entity("Entities.Models.Mechanic", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Cars");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
